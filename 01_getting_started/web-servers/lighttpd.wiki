### Lithium On Lighty

Let us assume for this example that you're developing locally and would like your app to be accessible at ``http://awesome.local/example_app``.

First, enable ``mod_magnet`` in your ``lighttpd.conf``.

{{{server.modules += ( "mod_magnet" )
}}}

Then, save the following script in a file named ``example_app.lua``, preferably somewhere near your ``lighttpd.conf``.

{{{-- little helper function
function file_exists(path)
  local attr = lighty.stat(path)
  if (attr) then
      return true
  else
      return false
  end
end
function removePrefix(str, prefix)
  return str:sub(1,#prefix+1) == prefix.."/" and str:sub(#prefix+2)
end

--[[ 
  prefix without the trailing slash.
  If you are *not* serving out of a subfolder, leave `prefix` empty.
--]]
local prefix = '/example_app'

-- the magic ;)
if (not file_exists(lighty.env["physical.path"])) then
    -- file still missing. pass it to the fastcgi backend
    request_uri = removePrefix(lighty.env["uri.path"], prefix)
    if request_uri then
      lighty.env["uri.path"]          = prefix .. "/index.php"
      local uriquery = lighty.env["uri.query"] or ""
      lighty.env["uri.query"] = uriquery .. (uriquery ~= "" and "&" or "") .. "url=" .. request_uri
      lighty.env["physical.rel-path"] = lighty.env["uri.path"]
      lighty.env["request.orig-uri"]  = lighty.env["request.uri"]
      lighty.env["physical.path"]     = lighty.env["physical.doc-root"] .. lighty.env["physical.rel-path"]
    end
end
-- fallthrough will put it back into the lighty request loop
-- that means we get the 304 handling for free. ;)}}}


Finally, in your ``lighttpd.conf``, add the following conditional:

{{{
$HTTP["host"] =~ "awesome.local" {
	server.document-root = "/path/to/your/app/webroot/"
	magnet.attract-physical-path-to = ( "/path/to/example_app.lua" ) 
}
}}}

You'll probably need to add a line item in your ``/etc/hosts`` file as well:

{{{127.0.0.1 awesome.local}}}

Restart your lighttpd process, and you're done!