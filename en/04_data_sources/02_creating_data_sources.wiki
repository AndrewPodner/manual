# Creating Data Sources

## Introduction

If you're reading this guide, chances are you've looked around for a data source in the Lithium community but haven't yet found it. Whether it's LDAP or the Flickr API you want to connect to, you're in luck. This guide will guide you through the thinking and the process necessary to create your own data source. 

First, we'll discuss some of the overall architectural knowledge needed, then we'll dive into the details with a real example.

## Metadata Methods

When creating a data source, it's important to realize the role of a data source. Data sources provide a layer that assists models, but focuses on the details surrounding connecting to, authenticating, and facilitating generic reads and writes to a certain data store. When creating a data source, work on the generic tasks needed to get the work done rather than the domain-specific work models will perform later on.

As such, it's important for Lithium's models to understand the structure of the underlying data. A well-written data source should provide that information in a format models understand. 

There are two main data source methods you'll want to implement: `entities()` and `describe()`:

<table>
	<thead>
	<tr>
		<th>Method Name</th>
		<th>Question it Answers</th>
		<th>RDMBS Example</th>
		<th>NoSQL Example</th>
		<th>API/Service Example</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>entities()</td>
		<td>What objects can models bind to?</td>
		<td>A list of tables in the database.</td>
		<td>A list of collections in the database.</td>
		<td>A list of objects manipulated by the API.</td>
	</tr>
	<tr>
		<td>describe()</td>
		<td>What properties does each entity have?</td>
		<td>What columns are in a given table, and what are their types?</td>
		<td>May only return an empty array, as the schema could be different between documents.</td>
		<td>Which properties are mutable/searchable on the objects in the API, and what type are they?</td>
	</tr>
	</tbody>
</table>

Focus on understanding the meaning behind these methods for nowâ€”we'll be implementing them and discussing the details as we create a real data source shortly.

## Queries and Entities

Once models understand the basic shape for your data, the next step is facilitating communication between the data source and its associated models.

In Lithium, models ask the data source questions through `Query` objects, and the data source answers with `Entity` objects, which are either a `Record` or a `Document`. For example, when a model is used in a controller to find data, it packages up a `Query` object that contains structured data about what sort of data the model is asking for, and in what order it expects it returned in. 

It passes this `Query` to the data source, which connects and authenticates to the data store. It inspects the query to see what the model needs, interacts with the underlying data store, and wraps the response data in some sort of `Entity`. If the response requires more than one `Entity`, it's usually wrapped up in a `Collection` like a `RecordSet` or `DocumentSet`.

Once the model has the `Entity`, it can provide that information back to the controller (or loop through it if it's in a collection).

## Example Data Source: GitHub Issues API

Let's dive into a real-life example of creating a data source. For the remainder of this guide, we'll walk through the process of creating a new data source that connects, authenticates, and moves data to and from the GitHub API. Version 2 of the GitHub API is available via a simple RESTful interface that uses HTTP authentication. We'll be setting up a new data source, using the existing `data\source\Http` class as a starting point.

### Setup

The end result we're looking for is being able to create models that read from and write to GitHub using our data source. Let's get started by creating the data source file and creating a connection to it. First, create a new file in `app/extensions/adapter/data/source/http/GitHub.php`:

{{{
<?php
namespace app\extensions\adapter\data\source\http;
class GitHub extends \lithium\data\source\Http {
}
?>
}}}

Let's also create a connection that uses this new data source. Add a few lines to `app/config/bootstrap/connections.php`:

{{{
<?php
Connections::add('github', array(
	'type'     => 'http',
	'adapter'  => 'GitHub',
	'login'    => 'myusername',
	'password' => '5up3Rs3CrE7',
	'token'    => 'e83fd93a7e099c8523ab99d003ce939a',
));
?>
}}}

Since the GitHub API allows for an API token to be passed instead of a password, we've added that to the connection information. 

Finally, we'll need to create a new model and controller to test the functionality as we build it:

{{{
<?php
namespace app\models;
class Issue extends \lithium\data\Model {
	public $_meta = array(
		'connection' => 'github'
	);
}
?>	
}}}

{{{
<?php
namespace app\controllers;
use app\models\Issue;
class IssuesController extends \lithium\action\Controller {
	public function index() {
	}
}
?>
}}}

### Connecting & Authentication

Now that we've got the basic classes in place, let's make sure that the model can connect to GitHub API correctly. Looking at the HTTP data source we're extending, you can see that configuration details for the `lithium\net\http\Service` object is passed to the data source's constructor, along with the connection details. By overriding the constructor, we can supply our own GitHub-specific connection details:

{{{
<?php
public function __construct(array $config = array()) {
	if(!empty($config['token'])) {
		$login = $config['login'] . '/token';
		$password = $config['token'];
	} else {
		$login = $config['login'];
		$password = $config['password'];
	}
	$defaults = array(
		'adapter'  => 'GitHub',
		'token'    => null,
		'scheme'   => 'https',
		'auth'     => 'Basic',
		'version'  => '1.1',
		'port'     => 443,
		'basePath' => '/api/v2/json',
	);
	$config['host']     = 'github.com';
	$config['login']    = $login;
	$config['password'] = $password;
	parent::__construct($config + $defaults);
}
?>
}}}

What we're doing here is checking to see if there's a token related to the connection. If so, we use it and adjust the username and password field as noted on the GitHub API website. Otherwise, we'll set the configuration options for the new `Service` object with the details we need. As we make changes, we're using the `$config` parameter of the data source, since that's where all the details from the connection are supplied.

### Reads

Next, let's use our model to read from our data source. This is done by the model's `find()` method. Let's place a find inside our controller, and supply a few parameters the GitHub API is going to need to fetch some issues from a project:

{{{
<?php
public function index() {
	$results = Issue::find('all', array(
		'conditions' => array(
			'user' => 'myuser',
			'repo' => 'myrepo',
			'state' => 'open',
		)
	));
}
?>
}}}

If you try this, `$results` will get filled with the 404 response from GitHub's servers. This is because the default behavior of `read()` doesn't fit our use-case. Let's override it in our new data source in order fix that. Remember that the model layer communicates to the data source via `Query` objects. The first argument for `read()` is the `Query` from our `Issue` model. We can inspect that to find out what the model wants, and translate that into HTTP requests to the GitHub API.

Let's override `read()`, and inspect the `Query` object so we can direct the query to the GitHub API properly.

{{{
<?php
public function read($query, array $options = array()) {
	extract($query->export($this));
	$path = '';
	switch ($source) {
		case 'issues':
			$path = String::insert(
				'/issues/list/{:user}/{:repo}/{:state}',
				array(
					'user'  => urlencode($conditions['user']),
					'repo'  => urlencode($conditions['repo']),
					'state' => urlencode($conditions['state']),
				)
			);
		break;
	}
	return json_decode($this->connection->get($this->_config['basePath'] . $path), true);
}
?>
}}}

Basically what we're doing here is checking to see which source the model is looking to read from. If the model is bound to the 'issues' source (which our `Issue` model will automatically do by name-convention), we craft the URL to the GitHub API using the conditions from the `Query`.

At this point, you've got a model that now returns array data that matches the JSON data returned from the GitHub API, but let's take this a bit further. We'll want to take advantage of Lithium's data objects: in this case, the `DocumentSet` and `Document` objects. Doing so allows your application to have a consistent API when it deals with data in controllers and templates.

We'll format the data for use in the model using two important data source methods: `item()` and `cast()`. The `item()` method is used to create data objects, and `cast()` is used by the data source to walk recursively through data structures and format them as you specify.

Both methods use Lithium's dependency injection mechanism to do so. As such, it's important to understand it at a basic level. Rather than a complex class structure of managers or containers, Lithium uses class properties to manage class dependencies. If you look at the `$_classes` property of a Lithium object, you'll see the types and fully namespaced classpaths of each dependency. In our case, we want to define what `item()` uses to create data objects. Let's add a `$_classes` definition to our data source:

{{{
<?php
protected $_classes = array(
	'service' => 'lithium\net\http\Service',
	'entity'  => 'lithium\data\entity\Document',
	'set'     => 'lithium\data\collection\DocumentSet',
);
?>
}}}

The 'service' dependency is included in the array because it's needed for the parent `Http` data source class, but it's something we could redefine if needed. The most important points to note are the last two entries: 'entity' and 'set'. By defining these dependencies, we're telling the data source what classes to use to package our data, either in singular or plural form. Because GitHub API data responses are JSON objects (that sometimes include embedded objects), we'll use `Document` rather than `Record`.

Once that's in place, we can adjust our `read()` function to return the results of an `item()` call:

{{{
<?php
public function read($query, array $options = array()) {
	extract($query->export($this));
	$path = '';
	switch ($source) {
		case 'issues':
			$path = String::insert(
				'/issues/list/{:user}/{:repo}/{:state}',
				array(
					'user'  => urlencode($conditions['user']),
					'repo'  => urlencode($conditions['repo']),
					'state' => urlencode($conditions['state']),
				)
			);
		break;
	}
	$data = json_decode($this->connection->get($this->_config['basePath'] . $path), true);
	return $this->item($query->model(), $data[$source], array('class' => 'set'));
}
?>
}}}

The `item()` method needs to know what model the data is coming from, the data itself, along with some options. Here, we're passing along an option that specifies that we want the data we're supplying returned as our defined 'set' dependency. In this case, we've configured that as `lithium\data\collection\DocumentSet`.

Running `find()` on our `Issue` model now gives us a `DocumentSet`, but if we inspect a specific entry in the set (by iterating, for example) we see that the entities in the set are just plain PHP arrays. Let's add the final piece to our data source that will create `Document` objects out of our responses.

The `cast()` method is used by the data source to recursively inspect and transform data as it's placed into a collection. In this case, we'll use cast to transform arrays into `Document` objects:

{{{
<?php
public function cast($entity, array $data, array $options = array()) {
	foreach($data as $key => $val) {
		if (!is_array($val)) {
			continue;
		}
		$model = $entity->model();
		$data[$key] = $this->item($model, $val, array('class' => 'entity'));
	}
	return parent::cast($entity, $data, $options);
}
?>
}}}

Notice how we're using `item()`, but to create entities rather than sets now? Here's where our 'entity' dependency comes into play. Also note that because `cast()` recursively inspects data, arrays embedded into our GitHub API responses will also be cast as `Document` objects.

At this point, your `Issue` model should be successfully connecting to the API and fetching lists of issues and returning that data in `Documents` inside of `DocumentSet` objects.

### Create, Update, Delete

Now that we're rocking with some reads, let's hook up the writes. This is done by POSTing some data to the GitHub API. First, let's change our controller so that the model is saving a new `Issue`:

{{{
<?php
public function index() {
	$issue = Issue::create();
	$issue->user = 'myuser';
	$issue->repo = 'myrepo';
	$issue->title = 'Title for my new issue!';
	$issue->body = 'Here\'s a description of the issue.';
	
	$issue->save();
}
?>
}}}

The API specifies that we POST to a URL composed of the user and repository names, and includes data about title and body. We'll need to make a new `create()` method in our data source that assembles the right URL and POST data based off what it receives from the model. In this case, `create()` is handed a `Query` that has an `Entity` property we can inspect and use.

{{{
<?php
public function create($query, array $options = array()) {
	extract($query->export($this));
	$path = '';
	switch ($source) {
		case 'issues':
			extract($query->entity()->data());
			$path = String::insert(
				'/issues/open/{:user}/{:repo}',
				array(
					'user'  => urlencode($user),
					'repo'  => urlencode($repo),
				)
			);
			$data = compact('title', 'body');
		break;
	}
	$result = json_decode($this->connection->post($this->_config['basePath'] . $path, $data), true);
	return isset($return[$source]);
}
?>
}}}

Since the GitHub API returns a JSON object on success, we inspect the response to make sure it's there, and return a boolean based on the success of the operation.

Updating and deleting works in the same manner: by overriding the corresponding method, inspecting the incoming query object to understand what the model needs, and using supporting classes to connect to the data source. Just remember to make sure that the other methods you create are agnostic as to what objects they're dealing with and leave that logic to the models.
